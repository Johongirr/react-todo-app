{"version":3,"sources":["components/AddTodo.js","components/Todo.js","App.js","serviceWorker.js","index.js"],"names":["AddTodo","state","task","handleSubmit","e","preventDefault","props","addTodo","target","querySelector","value","handleChange","setState","className","onSubmit","this","type","placeholder","onChange","Component","Todo","todos","removeFromLocalStorage","length","map","todo","key","id","onClick","App","setToLocalStorage","console","log","Math","random","getFromLocalStorage","localStorage","setItem","JSON","stringify","parse","getItem","eraseTodos","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sNA+BeA,E,4MA5BXC,MAAQ,CACJC,KAAM,I,EAEVC,aAAe,SAACC,GACZA,EAAEC,iBACF,EAAKC,MAAMC,QAAQ,EAAKN,OACxBG,EAAEI,OAAOC,cAAc,SAASC,MAAQ,I,EAG5CC,aAAe,SAACP,GAER,EAAKQ,SAAS,CACVV,KAAME,EAAEI,OAAOE,S,uDAKvB,OAEQ,0BAAMG,UAAW,aAAaC,SAAUC,KAAKZ,cACzC,2BAAOa,KAAK,OAAOC,YAAY,eAAeC,SAAUH,KAAKJ,eAC7D,4BAAQE,UAAU,iBAAlB,Y,GAtBEM,aCePC,EAfF,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,MAAMC,EAA2B,EAA3BA,uBACjB,OAAOD,EAAME,OACTF,EAAMG,KAAI,SAAAC,GACN,OACI,yBAAKC,IAAKD,EAAKE,GAAId,UAAU,wBACzB,uBAAGA,UAAU,cAAcY,EAAKvB,MAChC,4BAAQW,UAAU,uBAAuBe,QAAS,WAAKN,EAAuBG,EAAKE,MAAnF,SAKf,yBAAKd,UAAU,wBAAf,2BCsDUgB,E,4MA9Db5B,MAAQ,CACNoB,MAAO,I,EAGTS,kBAAoB,SAACL,GACnBM,QAAQC,IAAIP,GACZA,EAAKE,GAAKM,KAAKC,SACf,IAAIb,EAAQ,EAAKc,sBACjBd,EAAK,sBAAOA,GAAP,CAAcI,IACnBW,aAAaC,QAAQ,QAASC,KAAKC,UAAUlB,IAC7C,EAAKT,SAAS,CACZS,MAAM,GAAD,mBAAMA,GAAN,CAAaI,O,EAItBU,oBAAsB,WAOpB,OALGG,KAAKE,MAAMJ,aAAaK,QAAQ,UACzBH,KAAKE,MAAMJ,aAAaK,QAAQ,UAEhC,I,EAMZC,WAAa,WACX,IAAIrB,EAAQ,EAAKc,sBACjBd,EAAQ,GACRe,aAAaC,QAAQ,QAASC,KAAKC,UAAUlB,IAC7C,EAAKT,SAAS,CACZS,W,EAIJC,uBAAyB,SAACK,GACxB,IAAMN,EAAQ,EAAKc,sBAAsBQ,QAAO,SAAAlB,GAAI,OAAIA,EAAKE,KAAOA,KACpES,aAAaC,QAAQ,QAAQC,KAAKC,UAAUlB,IAC5CU,QAAQC,IAAIX,GACZ,EAAKT,SAAS,CACZS,W,uDAQF,OADAU,QAAQC,IAAIjB,KAAKd,MAAMoB,OAErB,yBAAKR,UAAU,QACZ,yBAAKA,UAAU,mBACV,wBAAIA,UAAU,eAAd,SACA,kBAAC,EAAD,CAASN,QAASQ,KAAKe,oBACvB,kBAAC,EAAD,CAAMT,MAASN,KAAKoB,sBAAwBb,uBAAwBP,KAAKO,yBACzE,4BAAQT,UAAU,cAAce,QAASb,KAAK2B,YAA9C,e,GAvDIvB,aCQEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,a","file":"static/js/main.def6c494.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass AddTodo extends Component {\r\n    state = {\r\n        task: ''\r\n    }\r\n    handleSubmit = (e)=>{\r\n        e.preventDefault()\r\n        this.props.addTodo(this.state)\r\n        e.target.querySelector('input').value = ''\r\n        \r\n    }\r\n    handleChange = (e)=>{\r\n       \r\n            this.setState({\r\n                task: e.target.value\r\n            })\r\n        \r\n    }\r\n    render() {\r\n        return (\r\n             \r\n                <form className =\"todo__form\" onSubmit={this.handleSubmit}>\r\n                    <input type=\"text\" placeholder=\"Add todos...\" onChange={this.handleChange}/>\r\n                    <button className=\"todo__add-btn\">Add</button>\r\n                </form>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default AddTodo;","import React, {Fragment} from 'react'\r\n\r\nconst Todo = ({todos,removeFromLocalStorage})=> {\r\n    return todos.length ? (\r\n        todos.map(todo=>{\r\n            return (\r\n                <div key={todo.id} className=\"todo__item-container\">\r\n                    <p className=\"todo__text\">{todo.task}</p>\r\n                    <button className=\"todo__remove-btn btn\" onClick={()=>{removeFromLocalStorage(todo.id)}}>x</button>\r\n                </div>\r\n            )\r\n        })\r\n    ) :\r\n    (<div className=\"center todo__no-left\">Ther are no todos left</div>)\r\n\r\n}\r\n\r\nexport default Todo;","import React, { Component } from 'react'\nimport AddTodo from './components/AddTodo';\nimport Todo from './components/Todo';\n\nclass App extends Component {\n  state = {\n    todos: []\n  }\n  \n  setToLocalStorage = (todo)=>{\n    console.log(todo)\n    todo.id = Math.random();\n    let todos = this.getFromLocalStorage()\n    todos = [...todos, todo]\n    localStorage.setItem('todos', JSON.stringify(todos))\n    this.setState({\n      todos: [...todos, todo]\n    })\n     \n  }\n  getFromLocalStorage = ()=>{\n    let todos = []\n    if(JSON.parse(localStorage.getItem('todos'))){\n      todos = JSON.parse(localStorage.getItem('todos'))\n    } else {\n      todos = []\n    }\n    return todos\n  }\n \n   \n  eraseTodos = ()=>{\n    let todos = this.getFromLocalStorage()\n    todos = []\n    localStorage.setItem('todos', JSON.stringify(todos));\n    this.setState({\n      todos\n    })\n\n  }\n  removeFromLocalStorage = (id)=>{\n    const todos = this.getFromLocalStorage().filter(todo => todo.id !== id)\n    localStorage.setItem('todos',JSON.stringify(todos))\n    console.log(todos)\n    this.setState({\n      todos\n    })\n     \n\n  }\n\n  render() {\n    console.log(this.state.todos)\n    return (\n      <div className=\"todo\">\n         <div className=\"todo__container\">\n              <h1 className=\"todo__title\">Todos</h1>\n              <AddTodo addTodo={this.setToLocalStorage}/>\n              <Todo todos = {this.getFromLocalStorage()}  removeFromLocalStorage={this.removeFromLocalStorage}/>\n              <button className=\"todo__clear\" onClick={this.eraseTodos}>Clear</button>\n         </div>\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}